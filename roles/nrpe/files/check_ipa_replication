#!/usr/bin/python3
# Copyright 2013, Tomas Edwardsson
# Copyright 2019, Bartlomiej Piotrowski
# Copyright 2022, Andrea Veri
#
# This script is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This script is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import ldap
import sys
from optparse import OptionParser

usage = "usage: %prog [options]"
parser = OptionParser(usage)

parser.add_option("--ldap-uri", "-u",
                  action="store", type=str, dest="uri",
                  default="ldaps://localhost:636", help="LDAP URI")
parser.add_option("--bind-dn", "-D",
                  action="store", type=str, dest="binddn",
                  help="Bind DN")
parser.add_option("--bind-password", "-w",
                  action="store", type=str, dest="bindpw",
                  help="Bind Password")

(options, args) = parser.parse_args()

try:
    l = ldap.initialize(options.uri)

    if options.binddn:
        l.bind_s(options.binddn, options.bindpw)

    replication = l.search_s('cn=config',
        ldap.SCOPE_SUBTREE,
        '(objectclass=nsds5replicationagreement)',
        ['nsDS5ReplicaHost', 'nsds5replicaLastUpdateStatus'])
except Exception as e:
    print('CRITICAL: Unable to initialize ldap connection: %s' % (e))
    sys.exit(2)

# Loop through replication agreements
for rhost in replication:
    _rhost = rhost[1]['nsDS5ReplicaHost'][0].decode()
    if rhost[1]['nsds5replicaLastUpdateStatus'][0][7:8].decode() == "0":
        print('OK, %s' % _rhost)
        sys.exit(0)
    elif rhost[1]['nsds5replicaLastUpdateStatus'][0][7:8].decode() == "1":
        # Busy Replica is not an error, its "unknown" (but its "ok" for now)
        print('OK, %s' % _rhost)
        sys.exit(0)
    else:
        print('CRITICAL, Failure in Replication')
        sys.exit(2) 

if not len(replication):
    print('WARNING: No replicas found')
    sys.exit(1)
